from os import getenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes

TOKEN = getenv("BOT_TOKEN", "PASTE_YOUR_TOKEN_HERE")
PDF_URL = getenv("PDF_URL", "https://yuriy3133.github.io/ai-writer-kit/ai-writer-kit-guide-dark.pdf")
ADMIN_CHAT_ID = getenv("ADMIN_CHAT_ID")  # optional: your Telegram numeric ID to get questions forwarded

WELCOME = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç AI Writer Kit.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å PDF", callback_data="download_pdf")],
        [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")]
    ]
    await update.message.reply_text(WELCOME, reply_markup=InlineKeyboardMarkup(keyboard))

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "download_pdf":
        await query.message.reply_text(f"üìÑ –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ PDF:\n{PDF_URL}")
    elif query.data == "ask_question":
        await query.message.reply_text("‚ùì –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None or update.message.text is None:
        return
    question = update.message.text.strip()
    await update.message.reply_text(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ! –ü–æ–ª—É—á–∏–ª:\n¬´{question}¬ª\n\n–°–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å —Å –æ—Ç–≤–µ—Ç–æ–º."
    )
    # Optional: forward to admin
    if ADMIN_CHAT_ID:
        try:
            await context.bot.send_message(chat_id=int(ADMIN_CHAT_ID),
                                           text=f"üí¨ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @{update.effective_user.username or update.effective_user.id}:\n{question}")
        except Exception as e:
            # Fail silently for user, but log to console
            print("Failed to notify admin:", e)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start ‚Äî –º–µ–Ω—é, /help ‚Äî –ø–æ–º–æ—â—å.")

def main():
    if not TOKEN or TOKEN == "PASTE_YOUR_TOKEN_HERE":
        raise RuntimeError("–£–∫–∞–∂–∏ —Ç–æ–∫–µ–Ω: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏–ª–∏ –≤—Å—Ç–∞–≤—å –µ–≥–æ –≤ —Ñ–∞–π–ª.")
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    # Long polling (–ø—Ä–æ—â–µ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –Ω–∞ Render/Railway)
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
